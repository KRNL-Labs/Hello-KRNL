{"abi":[{"type":"constructor","inputs":[{"name":"_masterKey","type":"address","internalType":"address"},{"name":"_recoveryKey","type":"address","internalType":"address"},{"name":"_owner","type":"address","internalType":"address"},{"name":"_delegatedAccountImpl","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"delegatedAccountCodeHash","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"emergencyResetNonce","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"newNonce","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getAuthorizationHash","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"authData","type":"tuple","internalType":"struct TargetBase.AuthData","components":[{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"expiry","type":"uint256","internalType":"uint256"},{"name":"id","type":"bytes32","internalType":"bytes32"},{"name":"executions","type":"tuple[]","internalType":"struct TargetBase.Execution[]","components":[{"name":"id","type":"bytes32","internalType":"bytes32"},{"name":"request","type":"bytes","internalType":"bytes"},{"name":"response","type":"bytes","internalType":"bytes"}]},{"name":"result","type":"bytes","internalType":"bytes"},{"name":"sponsorExecutionFee","type":"bool","internalType":"bool"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"selector","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"getCodeHash","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getNonce","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isAuthorizationUsed","inputs":[{"name":"authHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isDelegatedAccount","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isDelegatedAccountSet","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"masterKey","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"nonces","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"recoveryKey","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDelegatedAccountImplementation","inputs":[{"name":"implementation","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateMasterKey","inputs":[{"name":"newMasterKey","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateRecoveryKey","inputs":[{"name":"newRecoveryKey","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"usedAuthorizations","inputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"event","name":"AuthorizationVerified","inputs":[{"name":"authorizer","type":"address","indexed":true,"internalType":"address"},{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"nonce","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"dataHash","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"DelegatedAccountSet","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"},{"name":"codeHash","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"MasterKeyUpdated","inputs":[{"name":"oldKey","type":"address","indexed":true,"internalType":"address"},{"name":"newKey","type":"address","indexed":true,"internalType":"address"},{"name":"updatedBy","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RecoveryKeyUpdated","inputs":[{"name":"oldKey","type":"address","indexed":true,"internalType":"address"},{"name":"newKey","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"AuthorizationAlreadyUsed","inputs":[]},{"type":"error","name":"AuthorizationExpired","inputs":[]},{"type":"error","name":"DelegatedAccountNotSet","inputs":[]},{"type":"error","name":"InvalidAddress","inputs":[]},{"type":"error","name":"InvalidImplementation","inputs":[]},{"type":"error","name":"InvalidNonce","inputs":[]},{"type":"error","name":"InvalidSignature","inputs":[]},{"type":"error","name":"NoCode","inputs":[]},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"}]},{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]},{"type":"error","name":"UnauthorizedCaller","inputs":[]}],"bytecode":{"object":"0x608060405234801561000f575f80fd5b50604051610c85380380610c8583398101604081905261002e91610256565b60015f55816001600160a01b03811661006057604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61006981610121565b506001600160a01b0384166100915760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0383166100b85760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0381166100df5760405163e6c4247b60e01b815260040160405180910390fd5b600280546001600160a01b038087166001600160a01b031992831617909255600380549286169290911691909117905561011881610172565b505050506102a7565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b803f8015806101a057507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081145b156101be57604051633c11a9c560e21b815260040160405180910390fd5b60405161ef0160f01b60208201526001600160601b0319606084901b1660238201525f9060370160408051601f1981840301815290829052805160208201206006819055909250906001600160a01b038516907f5b1390f119226218b27296b195e4447b856827c4d713c7cb924a278080112e7c905f90a3505050565b80516001600160a01b0381168114610251575f80fd5b919050565b5f805f8060808587031215610269575f80fd5b6102728561023b565b93506102806020860161023b565b925061028e6040860161023b565b915061029c6060860161023b565b905092959194509250565b6109d1806102b45f395ff3fe608060405234801561000f575f80fd5b5060043610610111575f3560e01c80638da5cb5b1161009e578063b80a852c1161006e578063b80a852c14610258578063c99c35d81461026b578063d5a1780b1461027e578063daafc3a2146102a0578063f2fde38b146102b3575f80fd5b80638da5cb5b1461020e57806397905a881461021f578063ab17e33714610232578063ac1d92a114610245575f80fd5b806340110535116100e457806340110535146101a1578063715018a6146101aa5780637ecebe00146101b257806381ea4408146101d15780638afe35b9146101e3575f80fd5b806314335b8d146101155780632d0335ab1461014c5780632eb40090146101825780633dacd33c14610197575b5f80fd5b61013761012336600461068f565b5f9081526005602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61017461015a3660046106c1565b6001600160a01b03165f9081526004602052604090205490565b604051908152602001610143565b6101956101903660046106c1565b6102c6565b005b6006541515610137565b61017460065481565b610195610346565b6101746101c03660046106c1565b60046020525f908152604090205481565b6101746101df3660046106c1565b3f90565b6002546101f6906001600160a01b031681565b6040516001600160a01b039091168152602001610143565b6001546001600160a01b03166101f6565b6003546101f6906001600160a01b031681565b6101956102403660046106c1565b610359565b6101746102533660046106da565b61036d565b6101376102663660046106c1565b610406565b6101956102793660046106c1565b610424565b61013761028c36600461068f565b60056020525f908152604090205460ff1681565b6101956102ae366004610748565b6104e1565b6101956102c13660046106c1565b610504565b6102ce610543565b6001600160a01b0381166102f55760405163e6c4247b60e01b815260040160405180910390fd5b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fc1ded5e7b2e884aee7a9307c075cf7a3c01d6fde38a5dcc91e833fe602c70199905f90a35050565b61034e610543565b6103575f610570565b565b610361610543565b61036a816105c1565b50565b5f838335602085013560408601356103886060880188610770565b604051602001610399929190610827565b60408051601f1981840301815291905280516020909101206103be60808901896108d7565b6103ce60c08b0160a08c0161091a565b896040516020016103e799989796959493929190610939565b6040516020818303038152906040528051906020012090509392505050565b6006545f90823f908114801561041d575060065415155b9392505050565b6001546001600160a01b0316331480159061044a57506003546001600160a01b03163314155b1561046857604051635c427cd960e01b815260040160405180910390fd5b6001600160a01b03811661048f5760405163e6c4247b60e01b815260040160405180910390fd5b600280546001600160a01b038381166001600160a01b031983168117909355604051911691339183907fb659f04626597961e33b3345b88799f112d62f49db80f9dfced83f1db86059b5905f90a45050565b6104e9610543565b6001600160a01b039091165f90815260046020526040902055565b61050c610543565b6001600160a01b03811661053a57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61036a81610570565b6001546001600160a01b031633146103575760405163118cdaa760e01b8152336004820152602401610531565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b803f8015806105ef57507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081145b1561060d57604051633c11a9c560e21b815260040160405180910390fd5b60405161ef0160f01b60208201526bffffffffffffffffffffffff19606084901b1660238201525f9060370160408051601f1981840301815290829052805160208201206006819055909250906001600160a01b038516907f5b1390f119226218b27296b195e4447b856827c4d713c7cb924a278080112e7c905f90a3505050565b5f6020828403121561069f575f80fd5b5035919050565b80356001600160a01b03811681146106bc575f80fd5b919050565b5f602082840312156106d1575f80fd5b61041d826106a6565b5f805f606084860312156106ec575f80fd5b6106f5846106a6565b9250602084013567ffffffffffffffff811115610710575f80fd5b840160e08187031215610721575f80fd5b915060408401356001600160e01b03198116811461073d575f80fd5b809150509250925092565b5f8060408385031215610759575f80fd5b610762836106a6565b946020939093013593505050565b5f808335601e19843603018112610785575f80fd5b83018035915067ffffffffffffffff82111561079f575f80fd5b6020019150600581901b36038213156107b6575f80fd5b9250929050565b5f808335601e198436030181126107d2575f80fd5b830160208101925035905067ffffffffffffffff8111156107f1575f80fd5b8036038213156107b6575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b60208082528181018390525f906040808401600586901b8501820187855b888110156108c957878303603f190184528135368b9003605e1901811261086a575f80fd5b8a0180358452606061087e888301836107bd565b828a88015261089083880182846107ff565b925050506108a0878301836107bd565b9250858203888701526108b48284836107ff565b96890196955050509186019150600101610845565b509098975050505050505050565b5f808335601e198436030181126108ec575f80fd5b83018035915067ffffffffffffffff821115610906575f80fd5b6020019150368190038213156107b6575f80fd5b5f6020828403121561092a575f80fd5b8135801515811461041d575f80fd5b6bffffffffffffffffffffffff198a60601b1681528860148201528760348201528660548201528560748201528385609483013791151560f81b9290910160948101929092526001600160e01b0319166095820152609901969550505050505056fea2646970667358221220ed91b427916751f8f1f210e7198ca989ebc0cfacdf2f9d91de4d51977412f24d64736f6c63430008170033","sourceMap":"2470:22029:50:-:0;;;11171:535;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1857:1:37;2061:7;:21;11288:6:50;-1:-1:-1;;;;;1273:26:24;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:24;;1350:1;1322:31;;;811:51:51;784:18;;1322:31:24;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;;;;;;11314:24:50;::::1;11310:53;;11347:16;;-1:-1:-1::0;;;11347:16:50::1;;;;;;;;;;;11310:53;-1:-1:-1::0;;;;;11377:26:50;::::1;11373:55;;11412:16;;-1:-1:-1::0;;;11412:16:50::1;;;;;;;;;;;11373:55;-1:-1:-1::0;;;;;11442:35:50;::::1;11438:64;;11486:16;;-1:-1:-1::0;;;11486:16:50::1;;;;;;;;;;;11438:64;11513:9;:22:::0;;-1:-1:-1;;;;;11513:22:50;;::::1;-1:-1:-1::0;;;;;;11513:22:50;;::::1;;::::0;;;11545:11:::1;:26:::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;11642:57:::1;11677:21:::0;11642:34:::1;:57::i;:::-;11171:535:::0;;;;2470:22029;;2912:187:24;3004:6;;;-1:-1:-1;;;;;3020:17:24;;;-1:-1:-1;;;;;;3020:17:24;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;18998:741:50:-;19146:27;;19239:15;;;:97;;-1:-1:-1;19270:66:50;19258:78;;19239:97;19235:143;;;19359:8;;-1:-1:-1;;;19359:8:50;;;;;;;;;;;19235:143;19551:45;;-1:-1:-1;;;19551:45:50;;;1103:28:51;-1:-1:-1;;;;;;1193:2:51;1164:15;;;1160:45;1147:11;;;1140:66;19524:24:50;;1222:12:51;;19551:45:50;;;-1:-1:-1;;19551:45:50;;;;;;;;;;19633:22;;19551:45;19633:22;;;19606:24;:49;;;19551:45;;-1:-1:-1;19633:22:50;-1:-1:-1;;;;;19671:61:50;;;;;;;;19075:664;;18998:741;:::o;14:177:51:-;93:13;;-1:-1:-1;;;;;135:31:51;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:464::-;293:6;301;309;317;370:3;358:9;349:7;345:23;341:33;338:53;;;387:1;384;377:12;338:53;410:40;440:9;410:40;:::i;:::-;400:50;;469:49;514:2;503:9;499:18;469:49;:::i;:::-;459:59;;537:49;582:2;571:9;567:18;537:49;:::i;:::-;527:59;;605:49;650:2;639:9;635:18;605:49;:::i;:::-;595:59;;196:464;;;;;;;:::o;873:367::-;2470:22029:50;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561000f575f80fd5b5060043610610111575f3560e01c80638da5cb5b1161009e578063b80a852c1161006e578063b80a852c14610258578063c99c35d81461026b578063d5a1780b1461027e578063daafc3a2146102a0578063f2fde38b146102b3575f80fd5b80638da5cb5b1461020e57806397905a881461021f578063ab17e33714610232578063ac1d92a114610245575f80fd5b806340110535116100e457806340110535146101a1578063715018a6146101aa5780637ecebe00146101b257806381ea4408146101d15780638afe35b9146101e3575f80fd5b806314335b8d146101155780632d0335ab1461014c5780632eb40090146101825780633dacd33c14610197575b5f80fd5b61013761012336600461068f565b5f9081526005602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61017461015a3660046106c1565b6001600160a01b03165f9081526004602052604090205490565b604051908152602001610143565b6101956101903660046106c1565b6102c6565b005b6006541515610137565b61017460065481565b610195610346565b6101746101c03660046106c1565b60046020525f908152604090205481565b6101746101df3660046106c1565b3f90565b6002546101f6906001600160a01b031681565b6040516001600160a01b039091168152602001610143565b6001546001600160a01b03166101f6565b6003546101f6906001600160a01b031681565b6101956102403660046106c1565b610359565b6101746102533660046106da565b61036d565b6101376102663660046106c1565b610406565b6101956102793660046106c1565b610424565b61013761028c36600461068f565b60056020525f908152604090205460ff1681565b6101956102ae366004610748565b6104e1565b6101956102c13660046106c1565b610504565b6102ce610543565b6001600160a01b0381166102f55760405163e6c4247b60e01b815260040160405180910390fd5b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fc1ded5e7b2e884aee7a9307c075cf7a3c01d6fde38a5dcc91e833fe602c70199905f90a35050565b61034e610543565b6103575f610570565b565b610361610543565b61036a816105c1565b50565b5f838335602085013560408601356103886060880188610770565b604051602001610399929190610827565b60408051601f1981840301815291905280516020909101206103be60808901896108d7565b6103ce60c08b0160a08c0161091a565b896040516020016103e799989796959493929190610939565b6040516020818303038152906040528051906020012090509392505050565b6006545f90823f908114801561041d575060065415155b9392505050565b6001546001600160a01b0316331480159061044a57506003546001600160a01b03163314155b1561046857604051635c427cd960e01b815260040160405180910390fd5b6001600160a01b03811661048f5760405163e6c4247b60e01b815260040160405180910390fd5b600280546001600160a01b038381166001600160a01b031983168117909355604051911691339183907fb659f04626597961e33b3345b88799f112d62f49db80f9dfced83f1db86059b5905f90a45050565b6104e9610543565b6001600160a01b039091165f90815260046020526040902055565b61050c610543565b6001600160a01b03811661053a57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61036a81610570565b6001546001600160a01b031633146103575760405163118cdaa760e01b8152336004820152602401610531565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b803f8015806105ef57507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081145b1561060d57604051633c11a9c560e21b815260040160405180910390fd5b60405161ef0160f01b60208201526bffffffffffffffffffffffff19606084901b1660238201525f9060370160408051601f1981840301815290829052805160208201206006819055909250906001600160a01b038516907f5b1390f119226218b27296b195e4447b856827c4d713c7cb924a278080112e7c905f90a3505050565b5f6020828403121561069f575f80fd5b5035919050565b80356001600160a01b03811681146106bc575f80fd5b919050565b5f602082840312156106d1575f80fd5b61041d826106a6565b5f805f606084860312156106ec575f80fd5b6106f5846106a6565b9250602084013567ffffffffffffffff811115610710575f80fd5b840160e08187031215610721575f80fd5b915060408401356001600160e01b03198116811461073d575f80fd5b809150509250925092565b5f8060408385031215610759575f80fd5b610762836106a6565b946020939093013593505050565b5f808335601e19843603018112610785575f80fd5b83018035915067ffffffffffffffff82111561079f575f80fd5b6020019150600581901b36038213156107b6575f80fd5b9250929050565b5f808335601e198436030181126107d2575f80fd5b830160208101925035905067ffffffffffffffff8111156107f1575f80fd5b8036038213156107b6575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b60208082528181018390525f906040808401600586901b8501820187855b888110156108c957878303603f190184528135368b9003605e1901811261086a575f80fd5b8a0180358452606061087e888301836107bd565b828a88015261089083880182846107ff565b925050506108a0878301836107bd565b9250858203888701526108b48284836107ff565b96890196955050509186019150600101610845565b509098975050505050505050565b5f808335601e198436030181126108ec575f80fd5b83018035915067ffffffffffffffff821115610906575f80fd5b6020019150368190038213156107b6575f80fd5b5f6020828403121561092a575f80fd5b8135801515811461041d575f80fd5b6bffffffffffffffffffffffff198a60601b1681528860148201528760348201528660548201528560748201528385609483013791151560f81b9290910160948101929092526001600160e01b0319166095820152609901969550505050505056fea2646970667358221220ed91b427916751f8f1f210e7198ca989ebc0cfacdf2f9d91de4d51977412f24d64736f6c63430008170033","sourceMap":"2470:22029:50:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23371:128;;;;;;:::i;:::-;23441:4;23464:28;;;:18;:28;;;;;;;;;23371:128;;;;364:14:51;;357:22;339:41;;327:2;312:18;23371:128:50;;;;;;;;21386:100;;;;;;:::i;:::-;-1:-1:-1;;;;;21467:12:50;21441:7;21467:12;;;:6;:12;;;;;;;21386:100;;;;906:25:51;;;894:2;879:18;21386:100:50;760:177:51;20545:279:50;;;;;;:::i;:::-;;:::i;:::-;;21640:124;21719:24;;:38;;21640:124;;6683:39;;;;;;2293:101:24;;;:::i;5924:41:50:-;;;;;;:::i;:::-;;;;;;;;;;;;;;21918:500;;;;;;:::i;:::-;22357:20;;21918:500;5370:24;;;;;-1:-1:-1;;;;;5370:24:50;;;;;;-1:-1:-1;;;;;1288:32:51;;;1270:51;;1258:2;1243:18;5370:24:50;1124:203:51;1638:85:24;1710:6;;-1:-1:-1;;;;;1710:6:24;1638:85;;5648:26:50;;;;;-1:-1:-1;;;;;5648:26:50;;;18675:153;;;;;;:::i;:::-;;:::i;23980:517::-;;;;;;:::i;:::-;;:::i;22648:513::-;;;;;;:::i;:::-;;:::i;19965:382::-;;;;;;:::i;:::-;;:::i;6292:50::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;21062:120;;;;;;:::i;:::-;;:::i;2543:215:24:-;;;;;;:::i;:::-;;:::i;20545:279:50:-;1531:13:24;:11;:13::i;:::-;-1:-1:-1;;;;;20629:28:50;::::1;20625:57;;20666:16;;-1:-1:-1::0;;;20666:16:50::1;;;;;;;;;;;20625:57;20710:11;::::0;;-1:-1:-1;;;;;20731:28:50;;::::1;-1:-1:-1::0;;;;;;20731:28:50;::::1;::::0;::::1;::::0;;;20775:42:::1;::::0;20710:11;::::1;::::0;20731:28;20710:11;;20775:42:::1;::::0;20693:14:::1;::::0;20775:42:::1;20615:209;20545:279:::0;:::o;2293:101:24:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;18675:153:50:-;1531:13:24;:11;:13::i;:::-;18771:50:50::1;18806:14;18771:34;:50::i;:::-;18675:153:::0;:::o;23980:517::-;24116:7;24203:4;24225:14;;24257:15;;;;24290:11;;;;24340:19;;;;24225:8;24340:19;:::i;:::-;24329:31;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;24329:31:50;;;;;;;;;24319:42;;24329:31;24319:42;;;;24379:15;;;;:8;:15;:::i;:::-;24412:28;;;;;;;;:::i;:::-;24458:8;24169:311;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;24146:344;;;;;;24139:351;;23980:517;;;;;:::o;22648:513::-;23088:24;;22716:4;;22960:20;;;23076:36;;:78;;;;-1:-1:-1;23116:24:50;;:38;;23076:78;23069:85;22648:513;-1:-1:-1;;;22648:513:50:o;19965:382::-;1710:6:24;;-1:-1:-1;;;;;1710:6:24;20035:10:50;:21;;;;:50;;-1:-1:-1;20074:11:50;;-1:-1:-1;;;;;20074:11:50;20060:10;:25;;20035:50;20031:108;;;20108:20;;-1:-1:-1;;;20108:20:50;;;;;;;;;;;20031:108;-1:-1:-1;;;;;20152:26:50;;20148:55;;20187:16;;-1:-1:-1;;;20187:16:50;;;;;;;;;;;20148:55;20231:9;;;-1:-1:-1;;;;;20250:24:50;;;-1:-1:-1;;;;;;20250:24:50;;;;;;;20290:50;;20231:9;;;20329:10;;20231:9;;20290:50;;20214:14;;20290:50;20021:326;19965:382;:::o;21062:120::-;1531:13:24;:11;:13::i;:::-;-1:-1:-1;;;;;21152:12:50;;::::1;;::::0;;;:6:::1;:12;::::0;;;;:23;21062:120::o;2543:215:24:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:24;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:24;;2700:1:::1;2672:31;::::0;::::1;1270:51:51::0;1243:18;;2672:31:24::1;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;1796:162::-:0;1710:6;;-1:-1:-1;;;;;1710:6:24;735:10:35;1855:23:24;1851:101;;1901:40;;-1:-1:-1;;;1901:40:24;;735:10:35;1901:40:24;;;1270:51:51;1243:18;;1901:40:24;1124:203:51;2912:187:24;3004:6;;;-1:-1:-1;;;;;3020:17:24;;;-1:-1:-1;;;;;;3020:17:24;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;18998:741:50:-;19146:27;;19239:15;;;:97;;-1:-1:-1;19270:66:50;19258:78;;19239:97;19235:143;;;19359:8;;-1:-1:-1;;;19359:8:50;;;;;;;;;;;19235:143;19551:45;;-1:-1:-1;;;19551:45:50;;;6989:28:51;-1:-1:-1;;7054:2:51;7050:15;;;7046:53;7033:11;;;7026:74;19524:24:50;;7116:12:51;;19551:45:50;;;-1:-1:-1;;19551:45:50;;;;;;;;;;19633:22;;19551:45;19633:22;;;19606:24;:49;;;19551:45;;-1:-1:-1;19633:22:50;-1:-1:-1;;;;;19671:61:50;;;;;;;;19075:664;;18998:741;:::o;14:180:51:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:51;;14:180;-1:-1:-1;14:180:51:o;391:173::-;459:20;;-1:-1:-1;;;;;508:31:51;;498:42;;488:70;;554:1;551;544:12;488:70;391:173;;;:::o;569:186::-;628:6;681:2;669:9;660:7;656:23;652:32;649:52;;;697:1;694;687:12;649:52;720:29;739:9;720:29;:::i;1332:637::-;1437:6;1445;1453;1506:2;1494:9;1485:7;1481:23;1477:32;1474:52;;;1522:1;1519;1512:12;1474:52;1545:29;1564:9;1545:29;:::i;:::-;1535:39;;1625:2;1614:9;1610:18;1597:32;1652:18;1644:6;1641:30;1638:50;;;1684:1;1681;1674:12;1638:50;1707:22;;1763:3;1745:16;;;1741:26;1738:46;;;1780:1;1777;1770:12;1738:46;1803:2;-1:-1:-1;1855:2:51;1840:18;;1827:32;-1:-1:-1;;;;;;1888:32:51;;1878:43;;1868:71;;1935:1;1932;1925:12;1868:71;1958:5;1948:15;;;1332:637;;;;;:::o;1974:254::-;2042:6;2050;2103:2;2091:9;2082:7;2078:23;2074:32;2071:52;;;2119:1;2116;2109:12;2071:52;2142:29;2161:9;2142:29;:::i;:::-;2132:39;2218:2;2203:18;;;;2190:32;;-1:-1:-1;;;1974:254:51:o;2233:575::-;2356:4;2362:6;2422:11;2409:25;2516:2;2512:7;2501:8;2485:14;2481:29;2477:43;2457:18;2453:68;2443:96;;2535:1;2532;2525:12;2443:96;2562:33;;2614:20;;;-1:-1:-1;2657:18:51;2646:30;;2643:50;;;2689:1;2686;2679:12;2643:50;2722:4;2710:17;;-1:-1:-1;2773:1:51;2769:14;;;2753;2749:35;2739:46;;2736:66;;;2798:1;2795;2788:12;2736:66;2233:575;;;;;:::o;2813:500::-;2871:5;2878:6;2938:3;2925:17;3024:2;3020:7;3009:8;2993:14;2989:29;2985:43;2965:18;2961:68;2951:96;;3043:1;3040;3033:12;2951:96;3071:33;;3175:4;3162:18;;;-1:-1:-1;3123:21:51;;-1:-1:-1;3203:18:51;3192:30;;3189:50;;;3235:1;3232;3225:12;3189:50;3282:6;3266:14;3262:27;3255:5;3251:39;3248:59;;;3303:1;3300;3293:12;3318:266;3406:6;3401:3;3394:19;3458:6;3451:5;3444:4;3439:3;3435:14;3422:43;-1:-1:-1;3510:1:51;3485:16;;;3503:4;3481:27;;;3474:38;;;;3566:2;3545:15;;;-1:-1:-1;;3541:29:51;3532:39;;;3528:50;;3318:266::o;3589:1548::-;3828:2;3880:21;;;3853:18;;;3936:22;;;3799:4;;3977:2;3995:18;;;4059:1;4055:14;;;4040:30;;4036:39;;4098:6;3799:4;4132:976;4146:6;4143:1;4140:13;4132:976;;;4211:22;;;-1:-1:-1;;4207:36:51;4195:49;;4283:20;;4358:14;4354:27;;;-1:-1:-1;;4350:41:51;4326:66;;4316:94;;4406:1;4403;4396:12;4316:94;4436:31;;4522:19;;4507:35;;4490:4;4589:53;4627:14;;;4436:31;4589:53;:::i;:::-;4679:2;4674;4666:6;4662:15;4655:27;4709:70;4775:2;4767:6;4763:15;4749:12;4735;4709:70;:::i;:::-;4695:84;;;;4830:53;4879:2;4872:5;4868:14;4861:5;4830:53;:::i;:::-;4792:91;;4932:6;4924;4920:19;4915:2;4907:6;4903:15;4896:44;4963:65;5021:6;5005:14;4989;4963:65;:::i;:::-;5086:12;;;;4953:75;-1:-1:-1;;;5051:15:51;;;;-1:-1:-1;4168:1:51;4161:9;4132:976;;;-1:-1:-1;5125:6:51;;3589:1548;-1:-1:-1;;;;;;;;3589:1548:51:o;5142:521::-;5219:4;5225:6;5285:11;5272:25;5379:2;5375:7;5364:8;5348:14;5344:29;5340:43;5320:18;5316:68;5306:96;;5398:1;5395;5388:12;5306:96;5425:33;;5477:20;;;-1:-1:-1;5520:18:51;5509:30;;5506:50;;;5552:1;5549;5542:12;5506:50;5585:4;5573:17;;-1:-1:-1;5616:14:51;5612:27;;;5602:38;;5599:58;;;5653:1;5650;5643:12;5668:273;5724:6;5777:2;5765:9;5756:7;5752:23;5748:32;5745:52;;;5793:1;5790;5783:12;5745:52;5832:9;5819:23;5885:5;5878:13;5871:21;5864:5;5861:32;5851:60;;5907:1;5904;5897:12;5946:808;6328:26;6324:31;6315:6;6311:2;6307:15;6303:53;6298:3;6291:66;6387:6;6382:2;6377:3;6373:12;6366:28;6424:6;6419:2;6414:3;6410:12;6403:28;6461:6;6456:2;6451:3;6447:12;6440:28;6499:6;6493:3;6488;6484:13;6477:29;6551:6;6543;6537:3;6532;6528:13;6515:43;6639:14;;6632:22;6627:3;6623:32;6577:16;;;;6617:3;6609:12;;6602:54;;;;-1:-1:-1;;;;;;6686:33:51;6680:3;6672:12;;6665:55;6744:3;6736:12;;;-1:-1:-1;;;;;;5946:808:51:o","linkReferences":{}},"methodIdentifiers":{"delegatedAccountCodeHash()":"40110535","emergencyResetNonce(address,uint256)":"daafc3a2","getAuthorizationHash(address,(uint256,uint256,bytes32,(bytes32,bytes,bytes)[],bytes,bool,bytes),bytes4)":"ac1d92a1","getCodeHash(address)":"81ea4408","getNonce(address)":"2d0335ab","isAuthorizationUsed(bytes32)":"14335b8d","isDelegatedAccount(address)":"b80a852c","isDelegatedAccountSet()":"3dacd33c","masterKey()":"8afe35b9","nonces(address)":"7ecebe00","owner()":"8da5cb5b","recoveryKey()":"97905a88","renounceOwnership()":"715018a6","setDelegatedAccountImplementation(address)":"ab17e337","transferOwnership(address)":"f2fde38b","updateMasterKey(address)":"c99c35d8","updateRecoveryKey(address)":"2eb40090","usedAuthorizations(bytes32)":"d5a1780b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterKey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recoveryKey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatedAccountImpl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuthorizationAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuthorizationExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegatedAccountNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"DelegatedAccountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldKey\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKey\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"MasterKeyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldKey\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKey\",\"type\":\"address\"}],\"name\":\"RecoveryKeyUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"delegatedAccountCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"emergencyResetNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"internalType\":\"struct TargetBase.Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"sponsorExecutionFee\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TargetBase.AuthData\",\"name\":\"authData\",\"type\":\"tuple\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getAuthorizationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"authHash\",\"type\":\"bytes32\"}],\"name\":\"isAuthorizationUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDelegatedAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDelegatedAccountSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setDelegatedAccountImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMasterKey\",\"type\":\"address\"}],\"name\":\"updateMasterKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecoveryKey\",\"type\":\"address\"}],\"name\":\"updateRecoveryKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedAuthorizations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"POC Bundler Team\",\"details\":\"Implements a multi-layered authorization system:      - Signature-based authorization with master key control      - Strict smart account implementation validation      - Replay protection through nonce and hash tracking      - Temporal validation with expiry timestamps      - Emergency recovery mechanismsArchitecture:      Uses a modifier-based pattern where protected functions require      an AuthData parameter containing cryptographic proof of authorization.      Only approved DelegatedAccount implementations can call protected functions,      preventing EOA and unauthorized smart contract access.Access Control:      - Master Key: Signs all authorizations, can be rotated via owner/recovery      - Recovery Key: Can update master key in emergency situations      - Owner: Administrative control over contract settings and implementations      - DelegatedAccount: Only approved smart account implementation allowedReplay Protection:      - Sequential nonces per sender address      - Authorization hash tracking (sender, nonce, expiry, data, selector)      - Temporal validation with expiry timestamps      - One-time use enforcement per authorizationUsage Pattern: ```solidity contract MyProtectedContract is TargetBase {     function sensitiveOperation(         AuthData calldata authData,    // Required authorization proof         uint256 amount,                // Business logic parameters         address recipient              // Additional parameters     ) external requireAuth(authData) {         // Protected business logic here     } } ```Caller Requirements:      - Must be a deployed smart contract (no EOA access)      - Code hash must exactly match registered DelegatedAccount      - Authorization must be signed by current master key      - Nonce must be sequential and unused      - Authorization must not be expired\",\"errors\":{\"AuthorizationAlreadyUsed()\":[{\"details\":\"Thrown when authorization hash exists in usedAuthorizations mapping\"}],\"AuthorizationExpired()\":[{\"details\":\"Thrown when block.timestamp > authData.expiry\"}],\"DelegatedAccountNotSet()\":[{\"details\":\"Thrown when delegatedAccountCodeHash == bytes32(0)\"}],\"InvalidAddress()\":[{\"details\":\"Thrown during construction/updates when address(0) is not allowed\"}],\"InvalidImplementation()\":[{\"details\":\"Thrown when extcodehash(caller) != delegatedAccountCodeHash\"}],\"InvalidNonce()\":[{\"details\":\"Thrown when authData.nonce != nonces[msg.sender]\"}],\"InvalidSignature()\":[{\"details\":\"Thrown when ECDSA recovery fails or recovered address != masterKey\"}],\"NoCode()\":[{\"details\":\"Thrown when extcodehash(caller) == 0x0 or == keccak256(\\\"\\\")\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UnauthorizedCaller()\":[{\"details\":\"Thrown when msg.sender != owner && msg.sender != recoveryKey for admin functions\"}]},\"events\":{\"AuthorizationVerified(address,address,uint256,bytes32)\":{\"params\":{\"authorizer\":\"Address of the authorization key that signed\",\"dataHash\":\"Hash of the authorized data\",\"nonce\":\"The nonce used for this authorization\",\"sender\":\"Address that initiated the transaction\"}},\"DelegatedAccountSet(address,bytes32)\":{\"params\":{\"codeHash\":\"The extcodehash of the DelegatedAccount implementation\",\"implementation\":\"Address of the DelegatedAccount implementation\"}},\"MasterKeyUpdated(address,address,address)\":{\"params\":{\"newKey\":\"New authorization key address\",\"oldKey\":\"Previous authorization key address\",\"updatedBy\":\"Address that performed the update (owner or recovery)\"}},\"RecoveryKeyUpdated(address,address)\":{\"params\":{\"newKey\":\"New recovery key address\",\"oldKey\":\"Previous recovery key address\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets up the authorization framework with validation\",\"params\":{\"_delegatedAccountImpl\":\"Address of deployed DelegatedAccount implementation (cannot be zero) Requirements: - All addresses must be non-zero - _delegatedAccountImpl must be a deployed contract with code - _delegatedAccountImpl cannot be an empty contract (post-selfdestruct) Effects: - Sets masterKey for authorization signing - Sets recoveryKey for emergency master key rotation - Transfers ownership to _owner (via Ownable) - Registers _delegatedAccountImpl as the only approved caller implementation - Emits DelegatedAccountSet event Security: - Validates all addresses are non-zero to prevent misconfiguration - Validates implementation has deployed code to prevent empty contracts - Establishes caller verification from deployment\",\"_masterKey\":\"Address that will sign all authorization requests (cannot be zero)\",\"_owner\":\"Contract owner with administrative privileges (cannot be zero)\",\"_recoveryKey\":\"Emergency address that can rotate the master key (cannot be zero)\"}},\"emergencyResetNonce(address,uint256)\":{\"details\":\"Can only be called by owner, use with extreme caution\",\"params\":{\"newNonce\":\"The new nonce value\",\"user\":\"The user whose nonce to reset\"}},\"getAuthorizationHash(address,(uint256,uint256,bytes32,(bytes32,bytes,bytes)[],bytes,bool,bytes),bytes4)\":{\"details\":\"Helper function for off-chain signing - includes all AuthData except signature\",\"params\":{\"authData\":\"The complete authorization data structure (signature field ignored)\",\"selector\":\"The function selector being called\",\"user\":\"The user address that will execute the transaction\"},\"returns\":{\"_0\":\"The hash that should be signed by the authorization key\"}},\"getCodeHash(address)\":{\"params\":{\"account\":\"Address to check\"},\"returns\":{\"_0\":\"The extcodehash of the account\"}},\"getNonce(address)\":{\"params\":{\"user\":\"The user address to query\"},\"returns\":{\"_0\":\"The current nonce value\"}},\"isAuthorizationUsed(bytes32)\":{\"params\":{\"authHash\":\"The authorization hash to check\"},\"returns\":{\"_0\":\"True if the authorization has been used, false otherwise\"}},\"isDelegatedAccount(address)\":{\"params\":{\"account\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the account's code hash matches the DelegatedAccount implementation\"}},\"isDelegatedAccountSet()\":{\"returns\":{\"_0\":\"True if DelegatedAccount implementation is configured\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegatedAccountImplementation(address)\":{\"details\":\"Only owner can set the implementation\",\"params\":{\"implementation\":\"Address of the DelegatedAccount implementation\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMasterKey(address)\":{\"details\":\"Can be called by owner or recovery key for emergency updates\",\"params\":{\"newMasterKey\":\"The new authorization key address (cannot be zero)\"}},\"updateRecoveryKey(address)\":{\"details\":\"Can only be called by the contract owner\",\"params\":{\"newRecoveryKey\":\"The new recovery key address (cannot be zero)\"}}},\"stateVariables\":{\"delegatedAccountCodeHash\":{\"details\":\"Stores the exact extcodehash of the approved DelegatedAccount implementation      Only smart contracts with this exact code hash can call protected functions      Set during construction and updatable by owner for implementation upgrades\"},\"masterKey\":{\"details\":\"This address has exclusive authority to authorize protected operations      Can be updated by owner or recovery key for security rotation\"},\"nonces\":{\"details\":\"Maps sender address to current nonce value      Nonces must be used sequentially starting from 0      Incremented after each successful authorization\"},\"recoveryKey\":{\"details\":\"Separated from owner to provide additional security layer and operational flexibility      Can update master key but cannot perform other administrative functions\"},\"usedAuthorizations\":{\"details\":\"Maps authorization hash to usage status (true = used, false = unused)      Provides secondary replay protection layer beyond nonces      Hash includes: keccak256(sender, nonce, expiry, data, functionSelector)\"}},\"title\":\"TargetBase\",\"version\":1},\"userdoc\":{\"errors\":{\"AuthorizationAlreadyUsed()\":[{\"notice\":\"Authorization has already been consumed (replay attack prevention)\"}],\"AuthorizationExpired()\":[{\"notice\":\"Authorization has expired based on current block timestamp\"}],\"DelegatedAccountNotSet()\":[{\"notice\":\"DelegatedAccount implementation has not been configured\"}],\"InvalidAddress()\":[{\"notice\":\"Zero address provided where valid address required\"}],\"InvalidImplementation()\":[{\"notice\":\"Caller's contract implementation does not match approved DelegatedAccount\"}],\"InvalidNonce()\":[{\"notice\":\"Nonce value is incorrect - must be sequential\"}],\"InvalidSignature()\":[{\"notice\":\"Signature verification failed - invalid signature or wrong signer\"}],\"NoCode()\":[{\"notice\":\"Caller has no code deployed (EOA or empty contract)\"}],\"UnauthorizedCaller()\":[{\"notice\":\"Caller lacks required permissions for this operation\"}]},\"events\":{\"AuthorizationVerified(address,address,uint256,bytes32)\":{\"notice\":\"Emitted when an authorization is successfully verified\"},\"DelegatedAccountSet(address,bytes32)\":{\"notice\":\"Emitted when the DelegatedAccount implementation is set\"},\"MasterKeyUpdated(address,address,address)\":{\"notice\":\"Emitted when the authorization key is updated\"},\"RecoveryKeyUpdated(address,address)\":{\"notice\":\"Emitted when the recovery key is updated\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the TargetBase contract with security parameters\"},\"delegatedAccountCodeHash()\":{\"notice\":\"Approved DelegatedAccount implementation code hash\"},\"emergencyResetNonce(address,uint256)\":{\"notice\":\"Emergency function to reset a user's nonce\"},\"getAuthorizationHash(address,(uint256,uint256,bytes32,(bytes32,bytes,bytes)[],bytes,bool,bytes),bytes4)\":{\"notice\":\"Computes the hash that needs to be signed for an authorization\"},\"getCodeHash(address)\":{\"notice\":\"Get the code hash of an address\"},\"getNonce(address)\":{\"notice\":\"Gets the current nonce for a user\"},\"isAuthorizationUsed(bytes32)\":{\"notice\":\"Checks if an authorization hash has been used\"},\"isDelegatedAccount(address)\":{\"notice\":\"Check if an account is a valid DelegatedAccount implementation\"},\"isDelegatedAccountSet()\":{\"notice\":\"Check if DelegatedAccount implementation is set\"},\"masterKey()\":{\"notice\":\"The trusted master key that signs all authorization requests\"},\"nonces(address)\":{\"notice\":\"Per-sender nonce tracking for replay protection\"},\"recoveryKey()\":{\"notice\":\"Emergency recovery key for master key rotation\"},\"setDelegatedAccountImplementation(address)\":{\"notice\":\"Set the DelegatedAccount implementation\"},\"updateMasterKey(address)\":{\"notice\":\"Updates the authorization key address\"},\"updateRecoveryKey(address)\":{\"notice\":\"Updates the recovery key address\"},\"usedAuthorizations(bytes32)\":{\"notice\":\"Used authorization hash tracking for additional replay protection\"}},\"notice\":\"Base contract for signature-based authorization with smart account enforcement\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/TargetBase.sol\":\"TargetBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@account-abstraction@v0.7.0/=lib/account-abstraction/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e\",\"dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59\",\"dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]},\"src/TargetBase.sol\":{\"keccak256\":\"0x26d0cfdcd18f8af3e593b26bc20c20e198aa3373eb1cae14a3ba9c46158f0ff9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac3c7d78ee87e49a874835534be8905c75ca9b7eb8930cc9f6abed7052d664\",\"dweb:/ipfs/Qmcm9CZ3QqdH98pvDSDSQ7rCLmDaZkVCBqSNnkn4WSVxCC\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_masterKey","type":"address"},{"internalType":"address","name":"_recoveryKey","type":"address"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_delegatedAccountImpl","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"type":"error","name":"AuthorizationAlreadyUsed"},{"inputs":[],"type":"error","name":"AuthorizationExpired"},{"inputs":[],"type":"error","name":"DelegatedAccountNotSet"},{"inputs":[],"type":"error","name":"InvalidAddress"},{"inputs":[],"type":"error","name":"InvalidImplementation"},{"inputs":[],"type":"error","name":"InvalidNonce"},{"inputs":[],"type":"error","name":"InvalidSignature"},{"inputs":[],"type":"error","name":"NoCode"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"OwnableInvalidOwner"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"type":"error","name":"OwnableUnauthorizedAccount"},{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"},{"inputs":[],"type":"error","name":"UnauthorizedCaller"},{"inputs":[{"internalType":"address","name":"authorizer","type":"address","indexed":true},{"internalType":"address","name":"sender","type":"address","indexed":true},{"internalType":"uint256","name":"nonce","type":"uint256","indexed":false},{"internalType":"bytes32","name":"dataHash","type":"bytes32","indexed":false}],"type":"event","name":"AuthorizationVerified","anonymous":false},{"inputs":[{"internalType":"address","name":"implementation","type":"address","indexed":true},{"internalType":"bytes32","name":"codeHash","type":"bytes32","indexed":true}],"type":"event","name":"DelegatedAccountSet","anonymous":false},{"inputs":[{"internalType":"address","name":"oldKey","type":"address","indexed":true},{"internalType":"address","name":"newKey","type":"address","indexed":true},{"internalType":"address","name":"updatedBy","type":"address","indexed":true}],"type":"event","name":"MasterKeyUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"address","name":"oldKey","type":"address","indexed":true},{"internalType":"address","name":"newKey","type":"address","indexed":true}],"type":"event","name":"RecoveryKeyUpdated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"delegatedAccountCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"newNonce","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"emergencyResetNonce"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"struct TargetBase.AuthData","name":"authData","type":"tuple","components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"struct TargetBase.Execution[]","name":"executions","type":"tuple[]","components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"bytes","name":"request","type":"bytes"},{"internalType":"bytes","name":"response","type":"bytes"}]},{"internalType":"bytes","name":"result","type":"bytes"},{"internalType":"bool","name":"sponsorExecutionFee","type":"bool"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes4","name":"selector","type":"bytes4"}],"stateMutability":"pure","type":"function","name":"getAuthorizationHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"getCodeHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"authHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"isAuthorizationUsed","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"isDelegatedAccount","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isDelegatedAccountSet","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"masterKey","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"recoveryKey","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceOwnership"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setDelegatedAccountImplementation"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[{"internalType":"address","name":"newMasterKey","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateMasterKey"},{"inputs":[{"internalType":"address","name":"newRecoveryKey","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateRecoveryKey"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function","name":"usedAuthorizations","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Sets up the authorization framework with validation","params":{"_delegatedAccountImpl":"Address of deployed DelegatedAccount implementation (cannot be zero) Requirements: - All addresses must be non-zero - _delegatedAccountImpl must be a deployed contract with code - _delegatedAccountImpl cannot be an empty contract (post-selfdestruct) Effects: - Sets masterKey for authorization signing - Sets recoveryKey for emergency master key rotation - Transfers ownership to _owner (via Ownable) - Registers _delegatedAccountImpl as the only approved caller implementation - Emits DelegatedAccountSet event Security: - Validates all addresses are non-zero to prevent misconfiguration - Validates implementation has deployed code to prevent empty contracts - Establishes caller verification from deployment","_masterKey":"Address that will sign all authorization requests (cannot be zero)","_owner":"Contract owner with administrative privileges (cannot be zero)","_recoveryKey":"Emergency address that can rotate the master key (cannot be zero)"}},"emergencyResetNonce(address,uint256)":{"details":"Can only be called by owner, use with extreme caution","params":{"newNonce":"The new nonce value","user":"The user whose nonce to reset"}},"getAuthorizationHash(address,(uint256,uint256,bytes32,(bytes32,bytes,bytes)[],bytes,bool,bytes),bytes4)":{"details":"Helper function for off-chain signing - includes all AuthData except signature","params":{"authData":"The complete authorization data structure (signature field ignored)","selector":"The function selector being called","user":"The user address that will execute the transaction"},"returns":{"_0":"The hash that should be signed by the authorization key"}},"getCodeHash(address)":{"params":{"account":"Address to check"},"returns":{"_0":"The extcodehash of the account"}},"getNonce(address)":{"params":{"user":"The user address to query"},"returns":{"_0":"The current nonce value"}},"isAuthorizationUsed(bytes32)":{"params":{"authHash":"The authorization hash to check"},"returns":{"_0":"True if the authorization has been used, false otherwise"}},"isDelegatedAccount(address)":{"params":{"account":"Address to check"},"returns":{"_0":"Whether the account's code hash matches the DelegatedAccount implementation"}},"isDelegatedAccountSet()":{"returns":{"_0":"True if DelegatedAccount implementation is configured"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setDelegatedAccountImplementation(address)":{"details":"Only owner can set the implementation","params":{"implementation":"Address of the DelegatedAccount implementation"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updateMasterKey(address)":{"details":"Can be called by owner or recovery key for emergency updates","params":{"newMasterKey":"The new authorization key address (cannot be zero)"}},"updateRecoveryKey(address)":{"details":"Can only be called by the contract owner","params":{"newRecoveryKey":"The new recovery key address (cannot be zero)"}}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Initializes the TargetBase contract with security parameters"},"delegatedAccountCodeHash()":{"notice":"Approved DelegatedAccount implementation code hash"},"emergencyResetNonce(address,uint256)":{"notice":"Emergency function to reset a user's nonce"},"getAuthorizationHash(address,(uint256,uint256,bytes32,(bytes32,bytes,bytes)[],bytes,bool,bytes),bytes4)":{"notice":"Computes the hash that needs to be signed for an authorization"},"getCodeHash(address)":{"notice":"Get the code hash of an address"},"getNonce(address)":{"notice":"Gets the current nonce for a user"},"isAuthorizationUsed(bytes32)":{"notice":"Checks if an authorization hash has been used"},"isDelegatedAccount(address)":{"notice":"Check if an account is a valid DelegatedAccount implementation"},"isDelegatedAccountSet()":{"notice":"Check if DelegatedAccount implementation is set"},"masterKey()":{"notice":"The trusted master key that signs all authorization requests"},"nonces(address)":{"notice":"Per-sender nonce tracking for replay protection"},"recoveryKey()":{"notice":"Emergency recovery key for master key rotation"},"setDelegatedAccountImplementation(address)":{"notice":"Set the DelegatedAccount implementation"},"updateMasterKey(address)":{"notice":"Updates the authorization key address"},"updateRecoveryKey(address)":{"notice":"Updates the recovery key address"},"usedAuthorizations(bytes32)":{"notice":"Used authorization hash tracking for additional replay protection"}},"version":1}},"settings":{"remappings":["@account-abstraction@v0.7.0/=lib/account-abstraction/contracts/","@openzeppelin/=lib/openzeppelin-contracts/","account-abstraction/=lib/account-abstraction/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/TargetBase.sol":"TargetBase"},"evmVersion":"shanghai","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"keccak256":"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb","urls":["bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6","dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3","urls":["bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a","dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4","urls":["bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e","dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84","urls":["bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9","dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631","urls":["bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59","dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6","urls":["bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3","dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3","urls":["bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03","dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"],"license":"MIT"},"src/TargetBase.sol":{"keccak256":"0x26d0cfdcd18f8af3e593b26bc20c20e198aa3373eb1cae14a3ba9c46158f0ff9","urls":["bzz-raw://8aac3c7d78ee87e49a874835534be8905c75ca9b7eb8930cc9f6abed7052d664","dweb:/ipfs/Qmcm9CZ3QqdH98pvDSDSQ7rCLmDaZkVCBqSNnkn4WSVxCC"],"license":"MIT"}},"version":1},"id":50}